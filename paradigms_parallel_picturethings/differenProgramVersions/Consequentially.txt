#include <iostream>
#include <vector>
#include <fstream>
#include <cmath>
#include "lodepng.h"
#include <omp.h>
#include <chrono>

using namespace std;
using namespace lodepng;

const string GREETING = "Choose the picture\n1 - 300x300 px\n2 - 400x400 px\n3 - 500x500 px\n4 - 600x600 px\n5 - 950x950 px\n6 - 2400x2400 px\n";
const int amountOfIterations = 10;
const int PI = 3.1415926535;

void applyNegativeFilter(vector<unsigned char>& input) {
    for (int i = 0; i < input.size(); i+=4) {
        input[i] = 255 - input[i];
        input[i + 1] = 255 - input[i + 1];
        input[i + 2] = 255 - input[i + 2];
    }
}

vector<float> setKernel(int radius, float sigma) {
    vector<float> kernel(2 * radius + 1);
    float sigma_sq = sigma * sigma;
    float sum = 0;
    for (int i = -radius; i <= radius; i++) {
        float r = sqrt(2 * PI) * sigma;
        float num = exp(-(i * i) / (2 * sigma_sq));
        kernel[i + radius] = num / r;
        sum += kernel[i + radius];
    }
    for (int i = 0; i < kernel.size(); i++) {
        kernel[i] /= sum;
    }
    return kernel;
}

void applyGaussianBlur(std::vector<unsigned char>& image, unsigned int width, unsigned int height, float sigma, int radius) {
    vector<float> kernel = setKernel(radius, sigma);
    vector<unsigned char> temp_image(image.size());
    for (int y = 0; y < height; y++) {
        for (int x = 0; x < width; x++) {
            float r = 0, g = 0, b = 0;
            for (int i = -radius; i <= radius; i++) {
                int index = 4 * (y * width + std::min(std::max(x + i, 0), int(width - 1)));
                r += kernel[i + radius] * image[index];
                g += kernel[i + radius] * image[index + 1];
                b += kernel[i + radius] * image[index + 2];
            }
            int index = 4 * (y * width + x);
            temp_image[index] = r;
            temp_image[index + 1] = g;
            temp_image[index + 2] = b;
            temp_image[index + 3] = image[index + 3];
        }
    }
    for (int y = 0; y < height; y++) {
        for (int x = 0; x < width; x++) {
            float r = 0, g = 0, b = 0;
            for (int i = -radius; i <= radius; i++) {
                int index = 4 * (min(max(y + i, 0), int(height - 1)) * width + x);
                r += kernel[i + radius] * temp_image[index];
                g += kernel[i + radius] * temp_image[index + 1];
                b += kernel[i + radius] * temp_image[index + 2];
            }
            int index = 4 * (y * width + x);
            image[index] = r;
            image[index + 1] = g;
            image[index + 2] = b;
            image[index + 3] = temp_image[index + 3];
        }
    }
}

//сигнатура не совсем честная, хотя функция называется "приложить фильтр", помимо этого она ещё возвращает время наложения этого фильтра
double applyFilter(vector<unsigned char> input, unsigned int width, unsigned int height, string filterType, string updateOutput) {
    vector<unsigned char> imageCopy = input;
    auto start = chrono::high_resolution_clock::now();
    if (filterType == "negative") {
        applyNegativeFilter(imageCopy);
    } 
    else if (filterType == "gaussian") {
        int radius = 15;
        float sigma = 7.0;
        applyGaussianBlur(imageCopy, width, height, sigma, radius);
    }
    auto end = chrono::high_resolution_clock::now();
    auto duration = chrono::duration_cast<chrono::duration<double>>(end - start);
    if (updateOutput == "YES") {
        vector<unsigned char> output;
        unsigned error = encode(output, imageCopy, width, height);
        ofstream file("outputPictures/" + filterType + "Output.png", ios::binary);
        file.write((char*)output.data(), output.size());
        file.close();
    }
    return duration.count();
}

double getAverageTime(vector<unsigned char> input, unsigned int width, unsigned int height, string filterType) {
    double summ = applyFilter(input, width, height, filterType, "YES");
    for (int i = 1; i < amountOfIterations; ++i) {
        summ += applyFilter(input, width, height, filterType, "NO");
    }
    return summ / amountOfIterations;
}

int main()
{
    vector<unsigned char> image;
    cout << GREETING;
    string pictureNumber;
    cin >> pictureNumber;
    unsigned int width, height;
    unsigned error = decode(image, width, height, "inputPictures/" + pictureNumber + ".png");
    cout << "The application of the negative filter lasted " << getAverageTime(image, width, height, "gaussian") << " seconds\n";
}