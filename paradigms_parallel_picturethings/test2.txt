#include <iostream>
#include <vector>
#include <fstream>
#include <cmath>
#include "lodepng.h"
#include <emmintrin.h>
#include <immintrin.h>
#include <omp.h>
#include <chrono>

using namespace std;
using namespace lodepng;

const string CHOOSE_PICTURE = "Choose the picture:\n1 - 300x300 px\n2 - 400x400 px\n3 - 500x500 px\n4 - 600x600 px\n5 - 950x950 px\n6 - 2400x2400 px\nNote that entering number other than 1-6 will result in an error!\n";
const string CHOOSE_FILTER = "Choose the filter:\nNC - Negative consequentially\nNOMP - Negative using OMP\nNV - Negative using vectorization\nGC - Gaussian Blur consequentially\nGOMP - Gaussian Blur using OMP\nGV - Gaussian Blur using vectorization\n";
const string CHOOSE_AMOUNT_OF_ITERATIONS = "Now enter the amount of iterations you need. Please only enter integer numbers\n";
const double PI = 3.1415926535;

vector<unsigned char> convertToThreeChannels(vector<unsigned char> input, int width, int height) {
    const int numPixels = width * height;
    const int numChannels = 4;
    vector<unsigned char> output(numPixels * 3);
    for (int i = 0, j = 0; i < numPixels * numChannels; i += numChannels, j += 3) {
        output[j] = input[i];
        output[j + 1] = input[i + 1];
        output[j + 2] = input[i + 2];
    }
    return output;
}

void applyNegativeFilterConsequentially(vector<unsigned char>& image) {
    for (int i = 0; i < image.size(); i += 4) {
        image[i] = 255 - image[i];
        image[i + 1] = 255 - image[i + 1];
        image[i + 2] = 255 - image[i + 2];
    }
}

void applyNegativeFilterUsingOMP(vector<unsigned char>& image) {
    omp_set_num_threads(omp_get_max_threads());
    int i;
#pragma omp parallel for shared(image) private(i)
    for (i = 0; i < image.size(); i += 4) {
        image[i] = 255 - image[i];
        image[i + 1] = 255 - image[i + 1];
        image[i + 2] = 255 - image[i + 2];
    }
}

void applyNegativeFilterUsingVectorizaion(vector<unsigned char>& image) {
    const __m128i pixelLimit = _mm_set1_epi8(255);
    for (int i = 0; i < image.size(); i += 16) {
        __m128i pixel = _mm_loadu_si128(reinterpret_cast<const __m128i*>(&image[i]));
        pixel = _mm_sub_epi8(pixelLimit, pixel);
        _mm_storeu_si128(reinterpret_cast<__m128i*>(&image[i]), pixel);
    }
}

vector<float> setKernel(int radius, float sigma) {
    vector<float> kernel(2 * radius + 1);
    float sigma_sq = sigma * sigma;
    float sum = 0;
    for (int i = -radius; i <= radius; i++) {
        float r = sqrt(2 * PI) * sigma;
        float num = exp(-(i * i) / (2 * sigma_sq));
        kernel[i + radius] = num / r;
        sum += kernel[i + radius];
    }
    for (int i = 0; i < kernel.size(); i++) {
        kernel[i] /= sum;
    }
    return kernel;
}

void applyGaussianBlurConsequentially(std::vector<unsigned char>& image, unsigned int width, unsigned int height, float sigma, int radius) {
    vector<float> kernel = setKernel(radius, sigma);
    vector<unsigned char> temp_image(image.size());
    for (int y = 0; y < height; y++) {
        for (int x = 0; x < width; x++) {
            float r = 0, g = 0, b = 0;
            for (int i = -radius; i <= radius; i++) {
                int index = 4 * (y * width + min(max(x + i, 0), int(width - 1)));
                r += kernel[i + radius] * image[index];
                g += kernel[i + radius] * image[index + 1];
                b += kernel[i + radius] * image[index + 2];
            }
            int index = 4 * (y * width + x);
            temp_image[index] = r;
            temp_image[index + 1] = g;
            temp_image[index + 2] = b;
            temp_image[index + 3] = image[index + 3];
        }
    }
    for (int y = 0; y < height; y++) {
        for (int x = 0; x < width; x++) {
            float r = 0, g = 0, b = 0;
            for (int i = -radius; i <= radius; i++) {
                int index = 4 * (min(max(y + i, 0), int(height - 1)) * width + x);
                r += kernel[i + radius] * temp_image[index];
                g += kernel[i + radius] * temp_image[index + 1];
                b += kernel[i + radius] * temp_image[index + 2];
            }
            int index = 4 * (y * width + x);
            image[index] = r;
            image[index + 1] = g;
            image[index + 2] = b;
            image[index + 3] = temp_image[index + 3];
        }
    }
}

void applyGaussianBlurUsingOMP(vector<unsigned char>& image, int width, int height, float sigma, int radius) {
    vector<float> kernel = setKernel(radius, sigma);
    vector<unsigned char> temp_image(image.size());
    int y, x, i, index;
    float r, g, b;
    omp_set_num_threads(omp_get_max_threads());
#pragma omp parallel for shared (kernel, image, temp_image, width, height) private (y, x, i, index, r, g, b)
    for (y = 0; y < height; y++) {
        for (x = 0; x < width; x++) {
            r = 0, g = 0, b = 0;
            for (i = -radius; i <= radius; i++) {
                index = 4 * (y * width + min(max(x + i, 0), int(width - 1)));
                r += kernel[i + radius] * image[index];
                g += kernel[i + radius] * image[index + 1];
                b += kernel[i + radius] * image[index + 2];
            }
            index = 4 * (y * width + x);
            temp_image[index] = r;
            temp_image[index + 1] = g;
            temp_image[index + 2] = b;
            temp_image[index + 3] = image[index + 3];
        }
    }
#pragma omp parallel for shared (kernel, image, temp_image, width, height) private (y, x, i, index, r, g, b)
    for (y = 0; y < height; y++) {
        for (x = 0; x < width; x++) {
            r = 0, g = 0, b = 0;
            for (i = -radius; i <= radius; i++) {
                index = 4 * (min(max(y + i, 0), int(height - 1)) * width + x);
                r += kernel[i + radius] * temp_image[index];
                g += kernel[i + radius] * temp_image[index + 1];
                b += kernel[i + radius] * temp_image[index + 2];
            }
            index = 4 * (y * width + x);
            image[index] = r;
            image[index + 1] = g;
            image[index + 2] = b;
            image[index + 3] = temp_image[index + 3];
        }
    }
}

void applyGaussianBlurUsingVectorization(vector<unsigned char>& image, int width, int height, float sigma, int radius) {
    vector<float> kernel = setKernel(radius, sigma);
    vector<unsigned char> temp_image(image.size());
    //Здесь тебе нужно либо брать по 4 пикселя (и тогда i+=16, __m512), либо по 2 (и тогда i+=8, __m256)
    //Но для начала лучше просто сделай с одним пикселем
    
    for (int i = 0; i < image.size(); i += 4) {
        int y = (i / 4) / width;
        int x = (i / 4) % width;
        int index1 = 4 * (y * width + x);
        //__m128 pixel = _mm_set_ps(0, 0, 0, image[index1+3]);
        __m128i pixel = _mm_set_epi32(0, 0, 0, 255);
        //__m128i pixel = _mm_set_epi32(0, 0, 0, image[index1 + 3]);
        for (int j = -radius; j <= radius; ++j) {
            int index = 4 * (y * width + min(max(x + j, 0), width - 1));
            //__m128i kernels = _mm_set_epi32(kernel[j + radius], kernel[j + radius], kernel[j + radius], kernel[j + radius]);
            //__m128i surroundingPixels = _mm_set_epi32(image[index], image[index + 1], image[index + 2], 0);
            //pixel = _mm_add_epi32(pixel, _mm_mul_epi32(kernels, surroundingPixels));
            __m128i kernels = _mm_set_epi32(kernel[j + radius], kernel[j + radius], kernel[j + radius], kernel[j + radius]);
            __m128i surroundingPixels = _mm_set_epi32(image[index], image[index + 1], image[index + 2], 0);
            pixel = _mm_add_epi32(pixel, _mm_mul_epi32(kernels, surroundingPixels));
        }
        int* colors = (int*)&pixel;
        temp_image[index1] = (unsigned char)colors[0];
        temp_image[index1+1] = (unsigned char)colors[1];
        temp_image[index1+2] = (unsigned char)colors[2];
        temp_image[index1+3] = (unsigned char)colors[3];
        //_mm_storeu_si16(reinterpret_cast<__m128i*>(&temp_image[i]), pixel);
        //_mm_store_ps(reinterpret_cast<float*>(&temp_image[index1]), pixel);
    }
    for (int i = 0; i < image.size()/2; i += 4) {
        int y = (i / 4) / width;
        int x = (i / 4) % width;
        int index1 = 4 * (y * width + x);
        //__m128 pixel = _mm_set_ps(0, 0, 0, image[index1+3]);
        __m128i pixel = _mm_set_epi32(0, 0, 0, 255);
        //__m128i pixel = _mm_set_epi32(0, 0, 0, image[index1 + 3]);
        for (int j = -radius; j <= radius; ++j) {
            int index = 4 * (min(max(y + j, 0), int(height - 1)) * width + x);
            //__m128i kernels = _mm_set_epi32(kernel[j + radius], kernel[j + radius], kernel[j + radius], kernel[j + radius]);
            //__m128i surroundingPixels = _mm_set_epi32(image[index], image[index + 1], image[index + 2], 0);
            //pixel = _mm_add_epi32(pixel, _mm_mul_epi32(kernels, surroundingPixels));
            __m128i kernels = _mm_set_epi32(kernel[j + radius], kernel[j + radius], kernel[j + radius], kernel[j + radius]);
            __m128i surroundingPixels = _mm_set_epi32(temp_image[index], temp_image[index + 1], temp_image[index + 2], 0);
            pixel = _mm_add_epi32(pixel, _mm_mul_epi32(kernels, surroundingPixels));
        }
        int* colors = (int*)&pixel;
        image[index1] = (unsigned char)colors[0];
        image[index1 + 1] = (unsigned char)colors[1];
        image[index1 + 2] = (unsigned char)colors[2];
        image[index1 + 3] = (unsigned char)colors[3];
        //_mm_storeu_si16(reinterpret_cast<__m128i*>(&temp_image[i]), pixel);
        //_mm_store_ps(reinterpret_cast<float*>(&temp_image[index1]), pixel);
    }
}

void applyGaussianBlurUsingVectorization1(vector<unsigned char>& image, int width, int height, float sigma, int radius) {
    vector<float> kernel = setKernel(radius, sigma);
    vector<unsigned char> temp_image(image.size());
    for (int i = 0; i < image.size(); i+=16) {
        int y1 = (i / 4) / width;
        int x1 = (i / 4) % width;
        int y2 = ((i+4) / 4) / width;
        int x2 = ((i+4) / 4) % width;
        int y3 = ((i+8) / 4) / width;
        int x3 = ((i+8) / 4) % width;
        int y4 = ((i+12) / 4) / width;
        int x4 = ((i+12) / 4) % width;
        float r1 = 0, g1 = 0, b1 = 0;
        float r2 = 0, g2 = 0, b2 = 0;
        float r3 = 0, g3 = 0, b3 = 0;
        float r4 = 0, g4 = 0, b4 = 0;
        for (int j = -radius; j <= radius; j++) {
            int index1 = 4 * (y1 * width + min(max(x1 + j, 0), width - 1));
            int index2 = 4 * (y2 * width + min(max(x2 + j, 0), width - 1));
            int index3 = 4 * (y3 * width + min(max(x3 + j, 0), width - 1));
            int index4 = 4 * (y4 * width + min(max(x4 + j, 0), width - 1));
            r1 += kernel[j + radius] * image[index1];
            g1 += kernel[j + radius] * image[index1 + 1];
            b1 += kernel[j + radius] * image[index1 + 2];
            r2 += kernel[j + radius] * image[index2];
            g2 += kernel[j + radius] * image[index2 + 1];
            b2 += kernel[j + radius] * image[index2 + 2];
            r3 += kernel[j + radius] * image[index3];
            g3 += kernel[j + radius] * image[index3 + 1];
            b3 += kernel[j + radius] * image[index3 + 2];
            r4 += kernel[j + radius] * image[index4];
            g4 += kernel[j + radius] * image[index4 + 1];
            b4 += kernel[j + radius] * image[index4 + 2];
        }
        int index1 = 4 * (y1 * width + x1);
        int index2 = 4 * (y2 * width + x2);
        int index3 = 4 * (y3 * width + x3);
        int index4 = 4 * (y4 * width + x4);
        temp_image[index1] = r1;
        temp_image[index1 + 1] = g1;
        temp_image[index1 + 2] = b1;
        temp_image[index1 + 3] = image[index1 + 3];
        temp_image[index2] = r2;
        temp_image[index2 + 1] = g2;
        temp_image[index2 + 2] = b2;
        temp_image[index2 + 3] = image[index2 + 3];
        temp_image[index3] = r3;
        temp_image[index3 + 1] = g3;
        temp_image[index3 + 2] = b3;
        temp_image[index3 + 3] = image[index3 + 3];
        temp_image[index4] = r4;
        temp_image[index4 + 1] = g4;
        temp_image[index4 + 2] = b4;
        temp_image[index4 + 3] = image[index4 + 3];
    }
    for (int i = 0; i < image.size(); i+=16) {
        int y1 = (i / 4) / width;
        int x1 = (i / 4) % width;
        int y2 = ((i + 4) / 4) / width;
        int x2 = ((i + 4) / 4) % width;
        int y3 = ((i + 8) / 4) / width;
        int x3 = ((i + 8) / 4) % width;
        int y4 = ((i + 12) / 4) / width;
        int x4 = ((i + 12) / 4) % width;
        float r1 = 0, g1 = 0, b1 = 0;
        float r2 = 0, g2 = 0, b2 = 0;
        float r3 = 0, g3 = 0, b3 = 0;
        float r4 = 0, g4 = 0, b4 = 0;
        for (int j = -radius; j <= radius; j++) {
            int index1 = 4 * (min(max(y1 + j, 0), int(height - 1)) * width + x1);
            int index2 = 4 * (min(max(y2 + j, 0), int(height - 1)) * width + x2);
            int index3 = 4 * (min(max(y3 + j, 0), int(height - 1)) * width + x3);
            int index4 = 4 * (min(max(y4 + j, 0), int(height - 1)) * width + x4);
            r1 += kernel[j + radius] * temp_image[index1];
            g1 += kernel[j + radius] * temp_image[index1 + 1];
            b1 += kernel[j + radius] * temp_image[index1 + 2];
            r2 += kernel[j + radius] * temp_image[index2];
            g2 += kernel[j + radius] * temp_image[index2 + 1];
            b2 += kernel[j + radius] * temp_image[index2 + 2];
            r3 += kernel[j + radius] * temp_image[index3];
            g3 += kernel[j + radius] * temp_image[index3 + 1];
            b3 += kernel[j + radius] * temp_image[index3 + 2];
            r4 += kernel[j + radius] * temp_image[index4];
            g4 += kernel[j + radius] * temp_image[index4 + 1];
            b4 += kernel[j + radius] * temp_image[index4 + 2];
        }
        int index1 = 4 * (y1 * width + x1);
        int index2 = 4 * (y2 * width + x2);
        int index3 = 4 * (y3 * width + x3);
        int index4 = 4 * (y4 * width + x4);
        image[index1] = r1;
        image[index1 + 1] = g1;
        image[index1 + 2] = b1;
        image[index1 + 3] = temp_image[index1 + 3];
        image[index2] = r2;
        image[index2 + 1] = g2;
        image[index2 + 2] = b2;
        image[index2 + 3] = temp_image[index2 + 3];
        image[index3] = r3;
        image[index3 + 1] = g3;
        image[index3 + 2] = b3;
        image[index3 + 3] = temp_image[index3 + 3];
        image[index4] = r4;
        image[index4 + 1] = g4;
        image[index4 + 2] = b4;
        image[index4 + 3] = temp_image[index4 + 3];
    }
}

//сигнатура не совсем честная, хотя функция называется "приложить фильтр", помимо этого она ещё возвращает время наложения этого фильтра
double applyFilter(vector<unsigned char> input, unsigned int width, unsigned int height, string filterType, string filterSpecification, string updateOutput) {
    vector<unsigned char> imageCopy = input;
    auto start = chrono::high_resolution_clock::now();
    if (filterSpecification == "NC") {
        applyNegativeFilterConsequentially(imageCopy);
    }
    else if (filterSpecification == "NOMP") {
        applyNegativeFilterUsingOMP(imageCopy);
    }
    else if (filterSpecification == "NV") {
        //для применения векторизации легче использовать изображения в трёхканальном формате (чтобы просто игнорировать альфа-канал),
        //поэтому здесь перед обработкой изображения мы его переводим непосредственно в трёхканальный вид
        imageCopy = convertToThreeChannels(imageCopy, width, height);
        applyNegativeFilterUsingVectorizaion(imageCopy);
    }
    else if (filterSpecification == "GC") {
        float sigma = 7.2;
        int radius = 15;
        applyGaussianBlurConsequentially(imageCopy, width, height, sigma, radius);
    }
    else if (filterSpecification == "GOMP") {
        float sigma = 7.2;
        int radius = 15;
        applyGaussianBlurUsingOMP(imageCopy, width, height, sigma, radius);
    }
    else if (filterSpecification == "GV") {
        float sigma = 7.2;
        int radius = 15;
        applyGaussianBlurUsingVectorization(imageCopy, width, height, sigma, radius);
    }
    else {
        return -1;
    }
    auto end = chrono::high_resolution_clock::now();
    auto duration = chrono::duration_cast<chrono::duration<double>>(end - start);
    //cout << duration.count() << endl;
    if (updateOutput == "YES") {
        vector<unsigned char> output;
        
        unsigned error;
        if (filterSpecification == "NV") {
            error = encode(output, imageCopy, width, height, LCT_RGB);
        }
        else {
            error = encode(output, imageCopy, width, height);
        }
        if (error) {
            cout << "Ошибка при загрузке изображения: " << lodepng_error_text(error) << std::endl;
            return -1;
        }
        ofstream file("outputPictures/" + filterType + "Output.png", ios::binary);
        file.write((char*)output.data(), output.size());
        file.close();
    }
    return duration.count();
}

double getAverageTime(vector<unsigned char> input, int width, int height, string filterType, string filterSpecification, int amountOfIterations) {
    double summ = applyFilter(input, width, height, filterType, filterSpecification, "YES");
    for (int i = 1; i < amountOfIterations; ++i) {
        summ += applyFilter(input, width, height, filterType, filterSpecification, "NO");
    }
    return summ / amountOfIterations;
}

int main()
{
    vector<unsigned char> image;
    cout << CHOOSE_PICTURE;
    string pictureNumber;
    cin >> pictureNumber;
    cout << CHOOSE_FILTER;
    string filterType, filterSpecification;
    cin >> filterSpecification;
    if (filterSpecification[0] == 'N') {
        filterType = "negative";
    }
    else if (filterSpecification[0] == 'G') {
        filterType = "gaussian";
    }
    cout << CHOOSE_AMOUNT_OF_ITERATIONS;
    int amountOfIterations;
    cin >> amountOfIterations;
    unsigned int width, height;
    unsigned error = decode(image, width, height, "inputPictures/" + pictureNumber + ".png");
    cout << "The application of the " + filterType + " filter lasted " << getAverageTime(image, width, height, filterType, filterSpecification, amountOfIterations) 
        << " seconds on average of " << amountOfIterations << " iterations."; 

    
    /*__m128i pixel = _mm_setr_epi32(1, 2, 3, 4);
    __m128i fourPixels = _mm_shuffle_epi32(pixel, _MM_SHUFFLE(0, 0, 0, 0));
    float* ptr = (float*)&fourPixels;
    for (int i = 0; i < 4; i++)
        printf("%f ", ptr[i]); */
}